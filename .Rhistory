base_url <- "https://api.github.com/users/"
user <- "ericsueckert"
parameters <- "&per_page=100&created=desc"
# put together query url
query_url <- paste0(base_url, user, access_token, parameters)
# grab repository query url from user data from user query, then store repository data
user_data <- fromJSON(query_url)
repo_data <- fromJSON(user_data$repos_url)
# flatten data so it is all visible in one df
repo_df <- flatten(repo_data)
# determine number of repositories and most forked repository
num_repos <- nrow(repo_df)
most_popular <- repo_df %>%
select(forks_count) %>%
filter(forks_count == max(forks_count))
```
![User avatar](`r repo_df$owner.avatar_url`)
Hello.
The user `r user` has `r num_repos` repositories, and the most popular one has `r most_popular` forks.
```{r, echo=FALSE}
# create a smaller data frame with some relevant information. make column titles more readable
repo_df <- mutate(repo_df, date = format(as.Date(created_at), format="%B %d %Y"))
small_repo_df <- select(repo_df, name, description, forks_count, owner.login, date)
names(small_repo_df) <- c("Name", "Description", "Number of Forks", "Owner ID", "Date Created")
```
Here is a table showing the Name, descrption, number of forks, owner ID, and date created of each repository.
```{r, echo=FALSE}
# display the table
data_table <- kable(small_repo_df, format = "markdown")
```
`r data_table`
Here is a table showing the number of repositories for each programming language, and the average number of forks per language.
```{r, echo=FALSE}
#create a table with some summary information from the repositories, make column names readable, and display
summary_data <- repo_df %>%
group_by(language) %>%
summarise(
lang_repos = n(),
avg_forks = mean(forks_count)
)
names(summary_data) <- c("Language", "Number of repositories", "Average number of forks")
summary_table <- kable(summary_data, format = "markdown")
```
`r summary_table`
```{r, echo=FALSE}
# A bar plot showing number of repositories per language
barplot(table(repo_df$language))
```
num_repos <- nrow(repo_df)
most_popular <- repo_df %>%
select(forks_count) %>%
filter(forks_count == max(forks_count))
```
repo_df <- mutate(repo_df, date = format(as.Date(created_at), format="%B %d %Y"))
small_repo_df <- select(repo_df, name, description, forks_count, owner.login, date)
library(dplyr)
library(knitr)
library(jsonlite)
small_repo_df <- select(repo_df, name, description, forks_count, owner.login, date)
names(small_repo_df) <- c("Name", "Description", "Number of Forks", "Owner ID", "Date Created")
repo_df <- mutate(repo_df, date = format(as.Date(created_at), format="%B %d %Y"))
most_popular <- repo_df %>%
select(forks_count) %>%
filter(forks_count == max(forks_count))
library(dplyr)
library(jsonlite)
library(dplyr)
library(knitr)
# create variables for different parts of the query url
access_token <- "?access_token=035bfac119146d61224807b2d9fbc935f04b9d63"
base_url <- "https://api.github.com/users/"
user <- "ericsueckert"
parameters <- "&per_page=100&created=desc"
# put together query url
query_url <- paste0(base_url, user, access_token, parameters)
# grab repository query url from user data from user query, then store repository data
user_data <- fromJSON(query_url)
repo_data <- fromJSON(user_data$repos_url)
# flatten data so it is all visible in one df
repo_df <- flatten(repo_data)
# determine number of repositories and most forked repository
num_repos <- nrow(repo_df)
most_popular <- repo_df %>%
select(forks_count) %>%
filter(forks_count == max(forks_count))
repo_df$owner.avatar_url
repo_df$owner.avatar_url[1]
access_token <- "?access_token=035bfac119146d61224807b2d9fbc935f04b9d63"
access_token <- "?access_token=035bfac119146d61224807b2d9fbc935f04b9d63"
base_url <- "https://api.github.com/users/"
user <- "INFO-498F"
parameters <- "&per_page=100&created=desc"
# put together query url
query_url <- paste0(base_url, user, access_token, parameters)
# grab repository query url from user data from user query, then store repository data
user_data <- fromJSON(query_url)
repo_data <- fromJSON(user_data$repos_url)
# flatten data so it is all visible in one df
repo_df <- flatten(repo_data)
# determine number of repositories and most forked repository
num_repos <- nrow(repo_df)
most_popular <- repo_df %>%
select(forks_count) %>%
filter(forks_count == max(forks_count))
library(dplyr)
library(dplyr)
library(knitr)
# create variables for different parts of the query url
access_token <- "?access_token=035bfac119146d61224807b2d9fbc935f04b9d63"
base_url <- "https://api.github.com/users/"
user <- "INFO-498F"
parameters <- "&per_page=100&created=desc"
# put together query url
query_url <- paste0(base_url, user, access_token, parameters)
# grab repository query url from user data from user query, then store repository data
user_data <- fromJSON(query_url)
repo_data <- fromJSON(user_data$repos_url)
# flatten data so it is all visible in one df
repo_df <- flatten(repo_data)
# determine number of repositories and most forked repository
num_repos <- nrow(repo_df)
most_popular <- repo_df %>%
select(forks_count) %>%
filter(forks_count == max(forks_count))
detach("package:MASS", unload=TRUE)
# create variables for different parts of the query url
access_token <- "?access_token=035bfac119146d61224807b2d9fbc935f04b9d63"
base_url <- "https://api.github.com/users/"
user <- "ericsueckert"
parameters <- "&per_page=100&created=desc"
# put together query url
query_url <- paste0(base_url, user, access_token, parameters)
# grab repository query url from user data from user query, then store repository data
# create variables for different parts of the query url
access_token <- "?access_token=035bfac119146d61224807b2d9fbc935f04b9d63"
base_url <- "https://api.github.com/users/"
user <- "ericsueckert"
parameters <- "&per_page=100&created=desc"
# put together query url
query_url <- paste0(base_url, user, access_token, parameters)
# grab repository query url from user data from user query, then store repository data
user_data <- fromJSON(query_url)
repo_data <- fromJSON(user_data$repos_url)
# flatten data so it is all visible in one df
repo_df <- flatten(repo_data)
# determine number of repositories and most forked repository
num_repos <- nrow(repo_df)
most_popular <- repo_df %>%
select(forks_count) %>%
filter(forks_count == max(forks_count))
repo_df <- mutate(repo_df, date = format(as.Date(created_at), format="%B %d %Y"))
small_repo_df <- select(repo_df, name, description, forks_count, owner.login, date)
names(small_repo_df) <- c("Name", "Description", "Number of Forks", "Owner ID", "Date Created")
# display the table
data_table <- kable(small_repo_df, format = "markdown")
summary_data <- repo_df %>%
group_by(language) %>%
summarise(
lang_repos = n(),
avg_forks = mean(forks_count)
)
names(summary_data) <- c("Language", "Number of repositories", "Average number of forks")
summary_table <- kable(summary_data, format = "markdown")
repo_df$owner.avatar_url
repo_df$owner.avatar_url[1]
repo_data$owner$avatar_url
library(shiny)
iris
iris
df <- iris
View(df)
library(dplyr)
library(plotly)
avgs <- df %>%
group_by(Species) %>%
summarise(
avg_sepal_length = mean(Sepal.Length),
avg_sepal_width = mean(Sepal.Width),
avg_petal_length = mean(Petal.Length),
avg_petal_width = mean(Petal.Width)
)
View(avgs)
iris
shiny::runApp('Documents/info498/a8-building-applications')
shiny::runApp('Documents/info498/a8-building-applications')
shiny::runApp('Documents/info498/a8-building-applications')
shiny::runApp('Documents/info498/a8-building-applications')
df <- iris
spec <- input$species
spec <- input$species
xaxis <- eval(parse(text = input$dim1))
yaxis <- eval(parse(text = input$dim2))
shiny::runApp('Documents/info498/a8-building-applications')
shiny::runApp('Documents/info498/a8-building-applications')
shiny::runApp('Documents/info498/a8-building-applications')
shiny::runApp('Documents/info498/a8-building-applications')
shiny::runApp('Documents/info498/a8-building-applications')
shiny::runApp('Documents/info498/a8-building-applications')
plot_ly(df, x = df$Sepal.Length, y = df$Sepal.Width, mode = "markers")
layout(p, xaxis = list(title = "Date"), yaxis = list(title = "Casualties"))
shiny::runApp('Documents/info498/a8-building-applications')
shiny::runApp('Documents/info498/a8-building-applications')
shiny::runApp('Documents/info498/a8-building-applications')
shiny::runApp('Documents/info498/a8-building-applications')
shiny::runApp('Documents/info498/a8-building-applications')
shiny::runApp('Documents/info498/a8-building-applications')
shiny::runApp('Documents/info498/a8-building-applications')
shiny::runApp('Documents/info498/a8-building-applications')
shiny::runApp('Documents/info498/a8-building-applications')
shiny::runApp('Documents/info498/a8-building-applications')
shiny::runApp('Documents/info498/a8-building-applications')
shiny::runApp('Documents/info498/a8-building-applications')
shiny::runApp('Documents/info498/a8-building-applications')
shiny::runApp('Documents/info498/a8-building-applications')
shiny::runApp('Documents/info498/a8-building-applications')
shiny::runApp('Documents/info498/a8-building-applications')
xlabel <- sub(".", "\\s", "Sepal.Length")
xlabel <- sub(".", " ", "Sepal.Length")
xlabel <- sub("\\.", " ", "Sepal.Length")
shiny::runApp('Documents/info498/a8-building-applications')
shiny::runApp('Documents/info498/a8-building-applications')
shiny::runApp('Documents/info498/a8-building-applications')
shiny::runApp('Documents/info498/a8-building-applications')
shiny::runApp('Documents/info498/a8-building-applications')
layout(title = '2015 US city mass shootings', geo = g)
shiny::runApp('Documents/info498/a8-building-applications')
shiny::runApp('Documents/info498/a8-building-applications')
shiny::runApp('Documents/info498/a8-building-applications')
shiny::runApp('Documents/info498/a8-building-applications')
shiny::runApp('Documents/info498/a8-building-applications')
temp <- filter(df, Species == "setosa")
View(temp)
shiny::runApp('Documents/info498/a8-building-applications')
shiny::runApp('Documents/info498/a8-building-applications')
shiny::runApp('Documents/info498/a8-building-applications')
shiny::runApp('Documents/info498/a8-building-applications')
shiny::runApp('Documents/info498/a8-building-applications')
shiny::runApp('Documents/info498/a8-building-applications')
shiny::runApp('Documents/info498/a8-building-applications')
shiny::runApp('Documents/info498/a8-building-applications')
shiny::runApp('Documents/info498/a8-building-applications')
temp <- filter(df, Species == "setosa")
shiny::runApp('Documents/info498/a8-building-applications')
shiny::runApp('Documents/info498/a8-building-applications')
shiny::runApp('Documents/info498/a8-building-applications')
shiny::runApp('Documents/info498/a8-building-applications')
shiny::runApp('Documents/info498/a8-building-applications')
shiny::runApp('Documents/info498/a8-building-applications')
shiny::runApp('Documents/info498/a8-building-applications')
shiny::runApp('Documents/info498/a8-building-applications')
library(rsconnect)
rsconnect::deployApp('/Users/Potato/Documents/info498/a8-building-applications')
rsconnect::deployApp('/Users/Potato/Documents/info498/a8-building-applications')
rsconnect::deployApp('/Users/Potato/Documents/info498/a8-building-applications')
rsconnect::deployApp('/Users/Potato/Documents/info498/a8-building-applications')
rsconnect::deployApp('/Users/Potato/Documents/info498/a8-building-applications')
rsconnect::deployApp('/Users/Potato/Documents/info498/a8-building-applications')
shiny::runApp('Documents/info498/Final-Project-X/app')
shiny::runApp('Documents/info498/Final-Project-X/app')
---
shiny::runApp('Documents/info498/Final-Project-X/app')
shiny::runApp('Documents/info498/Final-Project-X/app')
shiny::runApp('Documents/info498/Final-Project-X/app')
# Include packages
library(jsonlite)
library(dplyr)
library(knitr)
# create variables for different parts of the query url
access_token <- "?access_token=035bfac119146d61224807b2d9fbc935f04b9d63"
base_url <- "https://api.github.com/users/"
user <- "ericsueckert"
parameters <- "&per_page=100&created=desc"
# put together query url
query_url <- paste0(base_url, user, access_token, parameters)
# grab repository query url from user data from user query, then store repository data
user_data <- fromJSON(query_url)
repo_data <- fromJSON(user_data$repos_url)
# flatten data so it is all visible in one df
repo_df <- flatten(repo_data)
# determine number of repositories and most forked repository
num_repos <- nrow(repo_df)
most_popular <- repo_df %>%
select(forks_count) %>%
filter(forks_count == max(forks_count))
View(repo_df)
View(most_popular)
avatar <- repo_df$owner.avatar_url[1]
# Include packages
library(jsonlite)
library(dplyr)
library(knitr)
# create variables for different parts of the query url
access_token <- "?access_token=035bfac119146d61224807b2d9fbc935f04b9d63"
base_url <- "https://api.github.com/users/"
user <- "ericsueckert"
parameters <- "&per_page=100&created=desc"
# put together query url
query_url <- paste0(base_url, user, access_token, parameters)
# grab repository query url from user data from user query, then store repository data
user_data <- fromJSON(query_url)
repo_data <- fromJSON(user_data$repos_url)
# flatten data so it is all visible in one df
repo_df <- flatten(repo_data)
# determine number of repositories and most forked repository
num_repos <- nrow(repo_df)
most_popular <- repo_df %>%
select(forks_count) %>%
filter(forks_count == max(forks_count))
avatar <- repo_df$owner.avatar_url[1]
repo_df <- mutate(repo_df, date = format(as.Date(created_at), format="%B %d %Y"))
small_repo_df <- select(repo_df, name, description, forks_count, owner.login, date)
names(small_repo_df) <- c("Name", "Description", "Number of Forks", "Owner ID", "Date Created")
data_table <- kable(small_repo_df, format = "markdown")
summary_data <- repo_df %>%
group_by(language) %>%
summarise(
lang_repos = n(),
avg_forks = mean(forks_count)
)
names(summary_data) <- c("Language", "Number of repositories", "Average number of forks")
summary_table <- kable(summary_data, format = "markdown")
barplot(table(repo_df$language))
avatar
num_repos <- nrow(repo_df)
nrow(repo_df)
View(most_popular)
View(repo_df)
library(jsonlite)
library(plotly)
# create variables for different parts of the query url
access_token <- "?access_token=035bfac119146d61224807b2d9fbc935f04b9d63"
base_url <- "https://api.github.com/users/"
user <- "ericsueckert"
parameters <- "&per_page=100&created=desc"
# put together query url
query_url <- paste0(base_url, user, access_token, parameters)
# grab repository query url from user data from user query, then store repository data
user_data <- fromJSON(query_url)
repo_data <- fromJSON(user_data$repos_url)
# flatten data so it is all visible in one df
repo_df <- flatten(repo_data)
summary_data <- repo_df %>% group_by(language) %>%
summarise(
total_repos = n()
)
View(summary_data)
barplot(table(repo_df$language))
df <- read.csv("VendingMachineInteractions2.csv")
df <- read.csv("VendingMachineInteractions2.csv")
df <- read.csv("VendingMachineInteractions2.csv")
df <- read.csv("hi.csv")
library(dplyr)
library(plotly)
df <- read.csv("hi.csv")
hi <- read.csv("~/Documents/HCDE 313/M3 Survey/hi.csv")
View(hi)
hi[1]
hi[28]
3s <- filter(hi, hi[28] == 3)
sat3 <- filter(hi, hi[28] == 3)
sat2 <- filter(hi, hi[28] == 2)
sat3 <- filter(hi, hi[28] == 4)
sat4 <- filter(hi, hi[28] == 4)
sat3 <- filter(hi, hi[28] == 3)
sat2 <- filter(hi, hi[28] == 2)
sat4 <- filter(hi, hi[28] == 4)
View(sat2)
View(sat3)
View(sat4)
hi2 <- hi
colnames(hi2) <- c("", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "")
View(hi2)
sat3 <- filter(hi2, hi[28] == 3)
sat2 <- filter(hi2, hi[28] == 2)
sat4 <- filter(hi2, hi[28] == 4)
View(sat2)
sat3 <- filter(hi2, hi2[28] == 3)
sat2 <- filter(hi2, hi2[28] == 2)
sat4 <- filter(hi2, hi2[28] == 4)
colnames(sat3) <- c("", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "")
colnames(sat2) <- c("", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "")
colnames(sat4) <- c("", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "")
touchbad <- filter(hi, hi[27] == 1)
numpadbad <- filter(hi, hi[25] == 1)
View(touchbad)
View(numpadbad)
selectionannoying <- filter(hi, hi[14])
selectionannoying <- filter(hi, hi[14] == 4)
View(selectionannoying)
selectionannoying <- filter(hi, hi[15] == 4)
View(selectionannoying)
changeannoying<- filter(hi, hi[17] == 4)
View(changeannoying)
library(rsconnect)
shiny::runApp('Documents/Portfolio page')
rsconnect::setAccountInfo(name='ericsueckert',
token='1C4F0C081E35FE8EDFB433DAB43219BD',
secret='<SECRET>')
rsconnect::setAccountInfo(name='ericsueckert',
token='1C4F0C081E35FE8EDFB433DAB43219BD',
secret='n7OJWqahVx68GC6LMaSRR0n7u+omI7Oq9u51kUNH')
shiny::runApp('Documents/Portfolio page')
shiny::runApp('Documents/Portfolio page')
shiny::runApp('Documents/Portfolio page')
shiny::runApp('Documents/Portfolio page')
shiny::runApp('Documents/Portfolio page')
shiny::runApp('Documents/Portfolio page')
shiny::runApp('Documents/Portfolio page')
shiny::runApp('Documents/Portfolio page')
shiny::runApp('Documents/Portfolio page')
shiny::runApp('Documents/Portfolio page')
install.packages("shinythemes")
shiny::runApp('Documents/Portfolio page')
shiny::runApp('Documents/Portfolio page')
shiny::runApp('Documents/Portfolio page')
shiny::runApp('Documents/Portfolio page')
shiny::runApp('Documents/Portfolio')
shiny::runApp('Documents/Portfolio')
shiny::runApp('Documents/Portfolio')
shiny::runApp('Documents/Portfolio')
rmdfiles <- c("pages/projects.Rmd")
sapply(rmdfiles, knit, quiet = T)
setwd("Users/Potato/Documents/Portfolio")
shiny::runApp('Documents/Portfolio')
shiny::runApp('Documents/Portfolio')
shiny::runApp('Documents/Portfolio')
shiny::runApp('Documents/Portfolio')
shiny::runApp('Documents/Portfolio')
shiny::runApp('Documents/Portfolio')
shiny::runApp('Documents/Portfolio')
shiny::runApp('Documents/Portfolio')
shiny::runApp('Documents/Portfolio')
install.packages("plotly")
install.packages("plotly")
library(shiny)
library(plotly)
library(rsconnect)
shiny::runApp('Documents/Portfolio')
deployApp()
runApp()
runApp()
setwd("~/Documents/Portfolio")
runApp()
deployApp()
library(dplyr)
library(jsonlite)
shiny::runApp()
deployApp()
deployApp()
deployApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
source("pages/scripts/github-api.R")
repo_df <- getUserInfo("ericsueckert")
summary_data <- repo_df %>% group_by(language) %>%
summarise(
total_repos = n()
)
p <- plot_ly(summary_data, x = language, y = total_repos,
type = 'bar',
color = total_repos
)
View(summary_data)
plot_ly(summary_data, x = language, y = total_repos,
type = 'bar',
color = total_repos
)
p <- plot_ly(summary_data, x = summary_data$language, y = summary_data$total_repos,
type = 'bar',
color = total_repos
)
p <- plot_ly(summary_data, x = summary_data$language, y = summary_data$total_repos,
type = 'bar',
color = total_repos
)
p <- plot_ly(summary_data, x = summary_data$language, y = summary_data$total_repos,
type = 'bar',
color = total_repos
)
p <- plot_ly(summary_data, x = summary_data$language, y = summary_data$total_repos,
type = 'bar',
color = total_repos
)
p <- plot_ly(summary_data, x = summary_data$language, y = summary_data$total_repos,
type = 'bar',
color = total_repos
)
p <- plot_ly(summary_data, x = summary_data$language, y = summary_data$total_repos,
type = 'bar',
color = total_repos
)
p <- plot_ly(summary_data, x = summary_data$language, y = summary_data$total_repos,
type = 'bar',
color = summary_data$total_repos
)
git <-  p %>% layout(xaxis = list(title = "Language"), yaxis = list(title = "Number of Repositories"))
p %>% layout(xaxis = list(title = "Language"), yaxis = list(title = "Number of Repositories"))
shiny::runApp()
shiny::runApp()
rsconnect::appDependencies()
shiny::runApp()
rsconnect::appDependencies()
devtools::install_github("evaluate")
devtools::install_github("hadley/evaluate")
shiny::runApp()
install.packages("knitr")
install.packages("knitr")
devtools::install_github("yihui/knitr")
shiny::runApp()
